Introduction to MASM

EDITOR
An editor is a program, which allows you to create a file containing the assembly language 
statements for your program. As you type in your program, the editor stores the ASCII codes for 
the letters and numbers in successive RAM locations. When you have typed in all of your 
programs, you then save the file on a floppy of hard disk. This file is called source file.

ASSEMBLER
An assembler program is used to translate the assembly language mnemonics for instructions to 
the corresponding binary codes. When you run the assembler, it reads the source file of your 
program from the disk,  The assembler generates two files on floppy or hard disk. The 
first file called the object file is given the extension. OBJ. The object file contains the binary 
codes for the instructions and information about the addresses of the instructions. The second file 
generated by the assembler is called assembler list file. The list file contains your assembly 
language statements, the binary codes for each instructions and the offset for each instruction.

LINKER
A linker is a program used to join several object files into one large object file and convert to an 
exe file. The linker produces a link file, which contains the binary codes for all the combined 
modules. The linker however doesn‟t assign absolute addresses to the program, it assigns is said to be reloadable because it can be put anywhere in memory to be run. 

DEBUGGER
A debugger is a program which allows you to load your object code program into system 
memory, execute the program and troubleshoot are debug it the debugger allows you to look at 
the contents of registers and memory locations after your program runs. It allows you to change 
the contents of register and memory locations after your program runs. It allows you to change 
the contents of register and memory locations and return the program. In 
MASM/TASM, td filename is issued to debug the file.



DEBUGGER FUNCTIONS:
1. Debugger allows looking at the contents of registers and memory locations.
2. We can extend 8-bit register to 16-bit register which the help of extended register 
option.
3. Debugger allows setting breakpoints at any point with the program.
that point.
5. With the help of dump we can view register contents.
6. We can trace the program step by step with the help of F7.




The DOS -Debugger:
The DOS “Debug” program is an example of simple debugger that comes with MS-DOS. 
Hence it is available on any PC .it was initially designed to give the user the capability to 
trace logical errors in executable file

procedure:

STEP1: Opening the DOS prompt
Click start menu button and click on Run and then type cmd at command prompt immediately 
DOS window will be appeared

STEP2: Checking the MASM installation
To know MASM is installed or not simply type masm at the command prompt upon that it 
replies masm version vendor (Microsoft), etc... If you get any error there is no masm in that PC

STEP3: Directory changing (create a folder with your branch and no in D drive)
Change the current directory to your won directory suppose your folder in D drive type the 
following commands to change the directory at command prompt type D: hit enter now you are 
in D drive type cd folder name hit the enter
Ex. D cd cse10
Now we are in folder cse10

STEP4: writing the program
At the command prompt type the 
edit
programname.asm
Ex. 
Edit add.asm
Immediately editor window will open and there you have to write the program. Type the 
program in that window after completion save the Program, to save the program Go to file opt in 
the menu bar and select save opt now your code is ready to Assemble.

STEP5: Assembling, Linking and Executing the program
Go to file opt click exit opt now DOS prompt will be displayed to assemble the program type 
the following commands at the DOS prompt
MASM Program Name, Program Name, Program Name, Program Name hit the enter
Ex: Masm add, add, add, add enter OR





1. 8086 Arithmetic Operations (Addition, Subtraction, multiplication and division).
AIM: - To write an assembly language program for arithmetic operations of two 16 bit numbers.
APPRATUS: 1.PC
2. MASM
i) PROGRAM: 16 bit addition
ASSUME CS: CODE, DS: DATA
DATA SEGMENT
NO1 DW 2341H
NO2 DW 1234H
RES DW ?
CODE SEGMENT
START: MOV AX,DATA
MOV DS,AX
MOV AX,NO1
MOV BX, NO2 
ADD AX,BX
MOV RESULT,AX
INT 03H
CODE ENDS
END START
Result:
ii) PROGRAM: 16 bit subtraction 
ASSUME CS: CODE, DS: DATA
DATA SEGMENT
NUM1 DW 2346H
NUM2 DW 1234H
RESULT DW ?
DATA ENDS
CODE SEGMENT
START: MOV AX,DATA
 MOV DS,AX
MOV AX,NUM1
MOV BX,NUM2
SUB AX,BX
MOV RESULT,AX
 INT 03H
CODE ENDS
END START.
Result:
iii) PROGRAM: 16 Bit Multiplication
ASSUME CS:CODE,DS:DATA
DATA SEGMENT
NUM1 DW 2222H
NUM2 DW 3333H
RESULT1 DW ?
RESULT2 DW ?
DATA ENDS
CODE SEGMENT
START: MOV AX,DATA
MOV DS,AX
MOV AX,NUM1
MOV BX,NUM2
MUL BX
MOV RESULT1,AX
MOV RESULT2,DX
INT 03H
CODE ENDS
END START.
Result
iv) PROGRAM:16 Bit Division
ASSUME CS:CODE,DS:DATA
DATA SEGMENT
NUM1 DW 4224H
NUM2 DW 2112H
QUOTIENT DW 0000H
REMAINDER DW 0000H
DATA ENDS
CODE SEGMENT
START: MOV AX,DATA
 MOV DS,AX
MOV AX,0000H
MOV DX,0000H
MOV AX,NUM1
MOV BX,NUM2
DIV BX
MOV QUOTIENT,AX
MOV REMAINDER,DX
INT 03H
CODE ENDS
END START
Result
RESULT: 16 bit arithmetical operations are performed by using different addressing modes.
