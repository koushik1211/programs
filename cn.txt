2. Implement the data link layer framing method “bit stuffing”

Theory:
Security and Error detection are the most prominent features that are to be provided by any application which transfers data from one end to the other end. One of such a mechanism in tracking errors which may add up to the original data during transfer is known as Stuffing. It is of two types namely Bit Stuffing and the other Character Stuffing. Coming to the Bit Stuffing, 01111110 is appended within the original data while transfer of it. The following program describes how it is stuffed at the sender end and de-stuffed at the reciever end.

SOURCE CODE: //  BIT STUFFING 

PROGRAM: 
#include<stdio.h> 
#include<string.h>
#include<conio.h> 
void main()
{
 	int a[15];
 	int i,j,k,n,c=0,pos=0;
 	clrscr();
 	printf("\n Enter the number of bits");
 	scanf("%d",&n);
 	printf("\n Enter the bits");
 	for(i=0;i<n;i++)
 	scanf("%d",&a[i]);
 	for(i=0;i<n;i++)
  	{
 		if(a[i]==1)
 		{
 			c++;
 			if(c==5)
 			{
 				pos=i+1;
 				c=0;
 				for(j=n;j>=pos;j--)
 				{
 					k=j+1;
 					a[k]=a[j];
 				}
 				a[pos]=0;
 				n=n+1;
 			}
 		}
 		else
 		c=0;
 	}

 	printf("\n DATA AFTER STUFFING \n");
 	printf(" 01111110 ");

 	for(i=0;i<n;i++)
  	{
 		printf("%d",a[i]);
 	}
 	printf(" 01111110 ");
getch();
}

OUTPUT:
enter the num of bits:9
enter the bits:1 0  1 1 1 1 1 1 0 1
DATA AFTER STUFFING
01111110 10111111010 01111110







4.Write a program to compute CRC code for the polynomial “CRC-16”

Program for CRC-16:-

#include<stdio.h>
#include<conio.h>
#include<string.h>
#include<dos.h>
#include<stdlib.h>
int copy();
int check();
int i, j, k, t, count = 0, num = 0;
int gen[10], frame[30], rem[30], temp[30];
void main()
{
    char c, plym[50];
    char ch[]={'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'};
    clrscr();
    printf("\t\t\t***CYCLIC REDUNDANCY CHECK-16***\n\n\n");
    for(i = 0; i < 50; i++)
    plym[i] = '\0';
    for(i = 0; i < 30; i++)
    temp[i] = rem[i] = frame[i] = '\0';
    for(i = 0; i < 10; i++)
    gen[i] = '\0';
    printf("enter the polynomial: ");
    gets(plym);
    plym[strlen(plym)] = ' ';
    for(i = 0; i < strlen(plym); i++)
    {
        if(plym[i] == 'x')
        {
            i++;
            for(;plym[i] != '+'; count, i++)
            {
            }
            if(count == 3)
            {
                for(i = i - 1, j = 3; j <= 9; j++)
                if(plym[i] == ch[j])
                {
                    printf("\Enter the polynomial's");
                    printf("degree is high");
                    getch(); exit(0);
                }
                for(j = 0, num = 10; j <= 2; j++)
            if(plym[i] == ch[j])
            {
                num=num + j;
                frame[num] = 1;
            }
        }
        if(count == 2)
        {
            for(i = i - 1, j = 1, num = 0; j <= 9; j++)
            if(plym[i] == ch[j])
            num = j;
            frame[num] = 1;
        }
        if(count == 0)
        frame[1] = 1;
        count = 0;
    } 
    else if(plym[i] == '1')
    frame[0] = 1;
    }
    printf("FRAME is: ");
    for(i = 12, j = 0; i >= 0; i--, j++)
    {
        temp[j] = frame[i];
        printf("%d", frame[i]);
    }
    printf("\n\n\n>>>>both high & low orders");
    printf("bits of GENERATOR must be 1<<<<");
    printf("\n enter the generator: ");
    for(num = i = 0; (c = getchar()) != '\n'; i++, num++)
    {
        if(c == '1')
        gen[i] = 1;
        else if(c == '0')
        gen[i] = 0;
        else
        {
            printf("\n Enter the GENERATOR");
            printf("is other then 0 or 1");
            getch(); exit(0);
        }
    }
    for(j = 13,i = i - 1; i > 0; i--, j++)
    temp[j] = 0;
    printf("\n\n FRAME after appending 0's: ");
    copy(); check();
    printf("\n The REMAINDER is: ");
    for(i = 13; i < j; i++)
    {
        temp[i] = rem[i];
        printf("%d", rem[i]);
    }
    printf("\n\n\n Transmitting FRAME......");
    delay(10000);
    printf("\n\n\n Transmitted FRAME is: ");
    copy(); check();
    printf("\n frame recieved");
    printf("\n\n\n checking for errors......");
    delay(10000);
    printf("\n\n\n recieved frame is: ");
    copy(); check();
    printf("\n the remainder is: ");
    for(i = 13; i < j; i++)
    printf("%d", rem[i]);
    printf("\n DATA SENT SUCCESSFULLY");
    getch();
}
check()
{
    for(i = 0; i <= 12; i++)
    {
        if(rem[i] == 0)
        continue;
        else
        {
            for(k = 0, t = i; k < num; k++, t++)
            {
                if(rem[t] == 1 && gen[k] == 1)
                rem[t] = 0;
                else if(rem[t] == 0 && gen[k] == 0)
                rem[t] = 0;
                else if(rem[t] == 1 && gen[k] == 0)
                rem[t] = 1;
                else if(rem[t] == 0 && gen[k] == 1)
                rem[t] = 1;
            }
        }
    }
    return 0;
}
copy()
{
    for(i = 0; i < j; i++)
    {
        printf("%d", temp[i]);
        rem[i] = temp[i];
    }
    return 0;
}

Output:-

***CYCLIC REDUNDANCY CHECk-16***

Enter the polynomial: x^15 x^8 x^7 x^5 x^3 x^2 1
FRAME is: 01000000110101101

>>>>both high & low ordersbits of GENERATOR must be 1<<<<
Enter the generator: 10011
FRAME after appending 0's: 010000001101011010000
The REMAINDER is: 1100

Transmitting frame......
TRANSMITTED FRAME is: 010000001101011011100
frame RECEIVED

Checking for ERRORS......
Recieved Frame is: 010000001101011011100
The REMAINDER is: 0000
            DATA SENT SUCCESSFULLY

